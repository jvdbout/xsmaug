#!@ENV@ @BASH@

############################################################################
#                                                                          #
#   X      X  ******* **    **  ******  **    **  ******                   #
#    X    X  ******** ***  *** ******** **    ** ********       \\._.//    #
#     X  X   **       ******** **    ** **    ** **             (0...0)    #
#      XX    *******  ******** ******** **    ** **  ****        ).:.(     #
#      XX     ******* ** ** ** ******** **    ** **  ****        {o o}     #
#     X  X         ** **    ** **    ** **    ** **    **       / ' ' \    #
#    X    X  ******** **    ** **    ** ******** ********    -^^.VxvxV.^^- #
#   X      X *******  **    ** **    **  ******   ******                   #
#                                                                          #
# ------------------------------------------------------------------------ #
# Ne[X]t Generation [S]imulated [M]edieval [A]dventure Multi[U]ser [G]ame  #
# ------------------------------------------------------------------------ #
# XSMAUG 2.4 (C) 2014  by Antonio Cao @burzumishi                          #
# ------------------------------------------------------------------------ #
#                   @PACKAGE@ MONITOR AND RESPAWN                           #
############################################################################

source @sysconfdir@/@PACKAGE@/@PACKAGE@d.conf

true=0;
false=1;

start_exec() {
	if test ! -f "$EXEC_PIDFILE"; then

		echo -n "'$MONITOR' (PID: $$) spawning '$EXEC' "

		($BINDIR/$EXEC $PORT &>>$EXEC_LOGFILE &) &

		until	pidof $EXEC > $EXEC_PIDFILE; do
			sleep 2;
		done;

		echo "(PID: $(cat $EXEC_PIDFILE)) started!";
	fi;

	return $true;
}

trap_system_int() {
	trap "manage_system_int" SIGINT SIGQUIT SIGTERM SIGKILL SIGSEGV
}

manage_system_int() {
	echo "'$MONITOR' (PID: $$) received an interrupt!";
	exit_monitor $false;
}

check_dirs() {
	for DIR in $RUNDIR $LOGDIR; do
	  if test ! -d "$DIR"; then
			mkdir -p $DIR &>/dev/null;
		fi;
	done;

	return $true;
}

exit_monitor() {
	exit_val=$1; shift;

	if test -f "$MONITOR_PIDFILE"; then
		rm -f $MONITOR_PIDFILE;
	fi;

	if test $exit_val -ne 0; then
		echo "'$MONITOR' (PID: $$) terminated on: \"$(date)\" with code ($exit_val)!";
	else
		echo "'$MONITOR' (PID: $$) closing ... Goodbye!";
	fi;

	exit $exit_val;
}

monitor_exec() {
	while :
	do
		if test ! -f "/proc/$(cat $EXEC_PIDFILE)/status"; then
	   	echo -n "Oopps! '$EXEC' has crashed at \"$(date)\", ";

			if test -f "$EXEC_PIDFILE"; then
				rm -f $EXEC_PIDFILE;
			fi;

    	start_exec || exit_monitor $false;
		fi;
	
		sleep 5;
	done

	return $true;
}

main() {
	trap_system_int;

	while :
	do
		read user_keyboard_input &

		echo $$ > $MONITOR_PIDFILE || exit_monitor $false;

		test -x $BINDIR/$EXEC || exit_monitor $false;

		set -e;

		check_dirs;

		start_exec || exit_monitor $false;

		monitor_exec;
	done;

	exit_monitor $true;
}

main "$@";

exit $true;
